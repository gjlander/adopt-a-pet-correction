const express = require('express');
//import express from "express";
const pets = require('./petList.js');

const app = express();
const port = process.env.PORT || 3000;

//Don't have to use .route(), however as app grows it will make code much more readable and maintainable.
// app.get('/', (req, res) => {
//     return res.send(`<h1>Adopt a Pet!</h1>
//     <p>Browse through the links below to find your new furry friend:</p>
//     <ul>
//         <li>Dogs</li>
//         <li>Cats</li>
//         <li>Rabbits</li>
//     </ul>`);
// });

//Can only have one of each type of request per route (also called endpoints)
app.route('/').get((req, res) => {
    return res.send(`<h1>Adopt a Pet!</h1>
    <p>Browse through the links below to find your new furry friend:</p>
    <ul>
        <li><a href="/animals/dogs">Dogs</a></li>
        <li><a href="/animals/cats">Cats</a></li>
        <li><a href="/animals/rabbits">Rabbits</a></li>
    </ul>`);
});

app.route('/animals/:pet_type').get((req, res) => {
    //Either declare a variable, or deconstruct
    // const petType = req.params.pet_type;
    const { pet_type } = req.params;

    return res.send(`<h1>List of ${pet_type}</h1>
    <ul>${
        //Conditional rendering to ensure app doesn't break if the URL doesn't match an existing pet type
        pets[pet_type]
            ? pets[pet_type]
                  .map((pet, i) => {
                      return `<li><a href=${`/animals/${pet_type}/${i + 1}`} >${
                          pet.name
                      }</a></li>`;
                  })
                  .join('')
            : "Sorry, we don't have those."
    }</ul>
    `);
});
app.route('/animals/:pet_type/:pet_id').get((req, res) => {
    // const petType = req.params.pet_type;
    // const petId = req.params.pet_id;
    const { pet_type, pet_id } = req.params;
    const findPet = pets[pet_type].find((pet, i) => +pet_id === i + 1);
    //Could be refactored using any property, best practice is to use a unique property, usually the ID generated by the database.
    // const findPet = pets[pet_type].find((pet) => +pet.name === pet_id);
    // return res.send(`<h1>${findPet.name}</h1>
    // <img src=${findPet.url} alt=${findPet.breed} />
    // <p>${findPet.description}</p>
    // <ul>
    //     <li>${findPet.breed}</li>
    //     <li>${findPet.age}</li>
    // </ul>
    // `);

    //BONUS: You could also destructure the properties in findPet
    //Comment out the return above, and you can see this will work in the same way
    // const { name, url, breed, description, age } = findPet;
    // return res.send(`<h1>${name}</h1>
    // <img src=${url} alt=${breed} />
    // <p>${description}</p>
    // <ul>
    //     <li>${breed}</li>
    //     <li>${age}</li>
    // </ul>
    // `);
});
app.listen(port, () => {
    console.log(`Adopt a pet listening on port ${port}`);
});
